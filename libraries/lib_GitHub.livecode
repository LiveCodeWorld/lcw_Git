script "lib_GitHub"
--> MetaData
-
copyright: David Bovill
license: GPLv3
name: lib_GitHub
type: script library
version: 0.3

/*
A library for interfacing with GitHub APIv3.

The gist library is seperate and moving forwards we wil create individual libraries for each GitHub subproject.
*/

--> Working on
-
command go_GitHubProject projectName
   if exists (stack projectName) then
      delete stack projectName
   end if
   --
   put github_ConstructProjectUrl (projectName) into rawURL
   go to stack url rawURL
   --
   return the result
end go_GitHubProject

command go_GitHubModule moduleName, projectName
   if exists (stack moduleName) then
      delete stack moduleName
   end if
   --
   put github_ConstructModuleUrl (moduleName, projectName) into rawURL
   go to stack url rawURL
   --
   return the result
end go_GitHubModule

function github_ConstructProjectUrl projectName
   -- https://github.com/LiveCodeWorld/lcw_Caddy/raw/master/lcw_Caddy.livecode
   put merge ("https://github.com/LiveCodeWorld/[[projectName]]/raw/master/[[projectName]].livecode") into someURL
   return someURL
end github_ConstructProjectUrl

function github_ConstructModuleUrl moduleName, projectName
   -- https://github.com/LiveCodeWorld/lcw_Governance/blob/master/modules/View_Governance_Person/View_Governance_Person.livecode?raw=true
   -- put "View_Governance_Person" into moduleName
   -- put "View_Governance_Person.livecode" into shortFile
   
   view_NormalizePiped moduleName -- just in case
   put moduleName into shortModuleFolder
   replace "|" with "_" in shortModuleFolder
   put shortModuleFolder & ".livecode" after shortFile
   --
   put merge ("https://github.com/LiveCodeWorld/[[projectName]]/blob/master/modules/[[shortModuleFolder]]/[[shortFile]]?raw=true") into someURL
   return someURL
end github_ConstructModuleUrl

function github_ConstructLaunchUrl stackName
   if exists (stack stackName) is false then return empty
   
   put the long id of stack stackName into tObject
   --
   put the filename of tObject into stackPath
   put the project_Name of tObject into repoName
   put the script_Type of tObject into scriptType
   --
   put github_GetLaunchUrl (repoName, stackPath, scriptType, stackName) into githubURL
   return githubURL
end github_ConstructLaunchUrl

function github_GetLaunchUrl pRepoName, pPath, scriptType, stackName
   if pRepoName is empty then
      return "https://github.com/LiveCodeWorld"
   end if
   
   put github_FetchRepoArray (pRepoName) into repoArray
   put github_ExtractHtmlUrl (repoArray) into githubURL
   if pPath is empty then
      return githubURL & pPath
   end if
   
   switch scriptType
      case "transport"
         -- https://github.com/LiveCodeWorld/lcw_Controllers
         -- /blob/master/
         -- controllers/ward.lc
         put "/blob/master/controllers/" & stackName into relPath
         break
      default
         -- https://github.com/LiveCodeWorld/lcw_Script
         -- /blob/master/
         -- libraries/lib_Help.livecodescript
         put "/blob/master/" after githubURL
         put _MakeStackPathRelative (pPath) into relPath
   end switch
   
   put relPath after githubURL
   --
   return githubURL
end github_GetLaunchUrl

private function _MakeStackPathRelative pPath
   if char 1 of pPath is not "/" then
      -- assume it is already relative
      return pPath
   end if
   
   if exists (stack pPath) then
      put the project_Folder of stack pPath into projectFolder
      set the itemdelimiter to slash
      put the number of items of projectFolder into firstItemNum
      put pPath into relPath
      delete item 1 to firstItemNum of relPath
      return relPath
   else
      breakpoint
      return pPath
   end if
end _MakeStackPathRelative


--> Github | Orgs
-
function github_ListOrgRepos pOrgName
   put github_FetchOrgRepoAray (pOrgName) into githubOrgRepoAray
   repeat for each key repoNum in githubOrgRepoAray
      put githubOrgRepoAray [repoNum]["name"] into repoName
      put repoName & CR after orgRepoNames
   end repeat
   delete char -1 of orgRepoNames
   sort orgRepoNames
   --
   return orgRepoNames
end github_ListOrgRepos

function github_ListMissingLocalRepos
   put env_ListLocalProjects() into localProjects
   --
   set the wholematches to true
   put github_FetchOrgRepoAray () into githubOrgRepoAray
   repeat for each key repoNum in githubOrgRepoAray
      put githubOrgRepoAray [repoNum]["name"] into repoName
      --
      if repoName is not among the lines of localProjects then
         put repoName & CR after missingRepoNames
      end if
   end repeat
   delete char -1 of missingRepoNames
   return missingRepoNames
end github_ListMissingLocalRepos

function github_ListNotOnGithub
   put env_ListLocalProjects() into localProjects
   put github_ListOrgRepos () into repoProjectNames
   --
   set the wholematches to true
   repeat for each line projectName in localProjects
      if projectName is not among the lines of repoProjectNames then
         put projectName & CR after notInRepoNames
      end if
   end repeat
   delete char -1 of notInRepoNames
   return notInRepoNames
end github_ListNotOnGithub

function github_CreateStackWikiPage stackObject
   /*
   You can find the latest version of the script [here](../blob/master/[[relativePath]]).
   
   [[scriptHelp]]
   
   ## Handlers
   
   [[handlerList]]
   */
   put debug_GetCommentAbove() into mkTemplate
   
   put the script_MetaData of stackObject into scriptMetaData
   put scriptMetaData ["script_Help"] into scriptHelp
   put the project_Folder of stackObject into projectFolder
   put the effective filename of stackObject into stackPath
   put stackPath into relativePath
   replace projectFolder with empty in relativePath
   put script_GetHandlerMarkdown (stackObject, relativePath) into handlerList
   
   put merge (mkTemplate) into wikiMarkdown
   return wikiMarkdown
end github_CreateStackWikiPage

function github_LivecodeWorldProjectExists projectName
   put github_ListOrgRepos() into lcwRepoNames
   put lcwRepoNames into LocalArray ["lcwRepoNames"]
   put projectName is among the lines of LocalArray ["lcwRepoNames"] into someBoolean
   return someBoolean
end github_LivecodeWorldProjectExists

getprop github_HandlerURL [shortHkey]
   put the long id of the target into hObject
   put the hkey_Line [shortHkey] of hObject into hTableLine
   if hTableLine is empty then return empty
   --
   put word 2 of hTableLine into hName
   put word 3 of hTableLine + 1 into sLineNum
   put word 4 of hTableLine + 1 into eLineNum
   --
   put github_GetHandlerURL (hObject, sLineNum, eLineNum) into githubURL 
   return githubURL
end github_HandlerURL


--> Github | Props
-
getprop github_WikiPage
   put the stack_Object of the target into stackObject
   put github_CreateStackWikiPage (stackObject) into mdLines
   return mdLines
end github_WikiPage

getprop github_RelativePath
   put the stack_Object of the target into sObject
   set the itemdelimiter to slash
   put the number of items of the engine folder + 2 into sNum
   get the filename of sObject
   put item sNum  to -1 of it into relPath
   return relPath
end github_RelativePath

getprop github_LaunchURL
   put the long id of the target into tObject
   --
   put the stack_Name of tObject into stackName
   put the script_Type of tObject into scriptType
   put the project_Name of stack stackName into projectName
   put the filename of stack stackName into stackPath
   
   put github_GetLaunchUrl (projectName, stackPath, scriptType, stackName) into githubURL
   return githubURL
end github_LaunchURL

function github_GetHandlerURL sObject, pStartLineNum, pEndLineNum
   -- put "https://github.com/livecode/livecode-ide/blob/develop/" & relPath into githubURL
   -- https://github.com/LiveCodeWorld/lcw_Script/blob/master/libraries/lib_Help.livecodescript
   put the project_Name of sObject into projectName
   put the github_RelativePath of sObject into relPath
   put merge ("https://github.com/LiveCodeWorld/[[projectName]]/blob/master/") & relPath into githubURL
   if pStartLineNum is not empty then
      put "#L" & pStartLineNum after githubURL
      put "-L" & pEndLineNum after githubURL
   end if
   return githubURL
end github_GetHandlerURL

function script_GetHandlerMarkdown tObject, relativePath
   put the revAvailableHandlers of tObject into handlerTable
   sort numeric handlerTable by word 3 of each
   repeat for each line someLine in handlerTable
      --    - [G mobile_VerticalScroller](../blob/master/libraries/lib_MobileControls.livecodescript#L35-L42)
      -- put word 1 of someLine into item 2 of shortHkey
      -- put word 2 of someLine into item 1 of shortHkey
      put word 3 of someLine +1 into startLineNum
      put word 4 of someLine +1 into endLineNum
      put "- [" & word 1 to 2 of someLine & "](../blob/master/" & relativePath & "#L" & startLineNum & "-L" & endLineNum & ")" & CR after mdLines
   end repeat
   delete char -1 of mdLines
   return mdLines
end script_GetHandlerMarkdown


--> GitHub | Launch
-
command github_LaunchStack stackName
   put github_ConstructLaunchUrl (stackName) into githubURL
   launch url githubURL
   return githubURL
end github_LaunchStack

command github_Launch repoName, pPath
   put github_GetLaunchUrl (repoName, pPath) into githubURL
   launch url githubURL
end github_Launch


--> GitHub | Tokens
-
function github_GetApiToken
   -- check LastPass
   -- token is cached first time we use this
   
   put "GitHubAuthoringToken" into prefName -- "GitHubApiToken"
   put pref_GetValue (prefName) into gitHubApiToken
   if gitHubApiToken is empty then
      put pref_FetchValue (prefName) into gitHubApiToken
      pref_SetValue prefName, gitHubApiToken
   end if
   return gitHubApiToken
end github_GetApiToken

command github_SetApiToken gitHubApiToken
   pref_SetValue "GitHubApiToken", gitHubApiToken
end github_SetApiToken


--> GitHub | Create
-
command github_CreateProject repoName, gitFolder, repoDescription
   -- First Create a new GitHub repo
   github_CreateOrgRepo repoName, repoDescription
   put the result into postJSON
   put json_ToArray (postJSON) into githubProjectArray
   --
   put githubProjectArray ["ssh_url"] into gitRemoteAddress
   if gitRemoteAddress is empty then
      breakpoint
   end if
   
   -- we need to add gitRemoteAddress to local folder
   git_AddFolderToRemote gitFolder, gitRemoteAddress
   put the result into addResult
   --
   return githubProjectArray
end github_CreateProject

function github_FetchSshUrl repoName
   put github_FetchRepoArray (repoName) into repoArray
   put repoArray ["ssh_url"] into remoteSshUrl
   return remoteSshUrl
end github_FetchSshUrl

function github_FetchReadmeMD githubProjectName
   -- put github_FetchReadmeMD ("lcw_Menus") into readmeJSON
   put "LiveCodeWorld" into orgName
   put merge ("https://raw.githubusercontent.com/[[orgName]]/[[githubProjectName]]/master/README.md") into readmeURL
   put url readmeURL into readmeMarkdown
   return readmeMarkdown
end github_FetchReadmeMD

function github_FindRepoName remoteAddress
   -- can fail to find if repo has been renamed
   put github_FetchOrgRepoAray() into reposArray
   repeat for each key repoNum in reposArray
      put reposArray [repoNum]["ssh_url"] into sshURL
      put reposArray [repoNum]["clone_url"] into cloneURL
      if sshURL = remoteAddress or cloneURL = remoteAddress then
         return reposArray [repoNum]["name"]
      end if
   end repeat
   return empty
end github_FindRepoName


--> GitHub | Issues
-
command github_CreateIssue repoOwner, someRepo, postJSON
   -- POST /repos/:owner/:repo/issues
   put _issueCommandPath (repoOwner, someRepo, "issues") into restPath
   github_RestPost restPath, postJSON
   return the result
end github_CreateIssue

function github_FetchIssue repoOwner, someRepo, issueNum
   -- GET /repos/:owner/:repo/issues/:number
   
   put "issues/" & issueNum into issueString   
   put _issueCommandPath (repoOwner, someRepo, issueString) into restPath
   put github_RestGet (restPath) into someJSON
   return someJSON
end github_FetchIssue

function github_ListRepoIssues repoOwner, someRepo
   -- help: https://developer.github.com/v3/issues/#list-issues
   -- GET /repos/:owner/:repo/issues
   
   put _issueCommandPath (repoOwner, someRepo, "issues") into restPath
   put github_RestGet (restPath) into someJSON
   return someJSON
end github_ListRepoIssues

function github_ListAllMyIssues
   -- help: https://developer.github.com/v3/issues/#list-issues
   --  List all issues across all the authenticated user's visible repositories including owned repositories, member repositories, and organization repositories:
   put github_RestGet ("/issues") into someData
   return someData
end github_ListAllMyIssues

function github_ListMyIssues
   -- help: https://developer.github.com/v3/issues/#list-issues
   -- List all issues across owned and member repositories for the authenticated user:
   put github_RestGet ("/user/issues") into someJSON
   return someJSON
end github_ListMyIssues

function github_ListOrgIssues someOrg
   -- help: https://developer.github.com/v3/issues/#list-issues
   -- put "co-operating-systems" into someOrg
   
   put "/orgs/" & someOrg & "/issues" into orgBit
   put github_RestGet (orgBit) into someJSON
   return someJSON
end github_ListOrgIssues


--> GitHub | Repos
-
command github_CreateOrgRepo rName, rDesc, pOrgName, pHomePage
   -- https://developer.github.com/v3/repos/#create
   if pOrgName is empty then put "LiveCodeWorld" into pOrgName
   if pHomePage is empty then put "http://livecode.world" into pHomePage
   put merge ("/orgs/[[pOrgName]]/repos") into restPath
   --
   put rName into postArray ["name"]
   put rDesc into postArray ["description"]
   put pHomePage into postArray ["homepage"]
   put "false" into postArray ["private"]
   put "true" into postArray ["has_issues"]
   put "true" into postArray ["has_projects"]
   put "true" into postArray ["has_wiki"]
   --
   put json_FromArray (postArray) into postJSON
   github_RestPost restPath, postJSON
   put the result into postResult
   return postResult
end github_CreateOrgRepo

function github_ExtractHtmlUrl repoArray
   put repoArray ["html_url"] into githubURL
   return githubURL
end github_ExtractHtmlUrl

command github_DeconstructRepoArray repoArray, @remoteAddress, @htmlURL, @cloneURL, @gitURL
   put repoArray ["clone_url"] into cloneURL
   put repoArray ["git_url"] into gitURL
   put repoArray ["html_url"] into htmlURL
   put repoArray ["ssh_url"] into remoteAddress
end github_DeconstructRepoArray

function github_FetchOrgRepoAray pOrgName
   put github_FetchOrgRepoListJson (pOrgName) into someJSON
   put json_ToArray (someJSON) into reposArray
   return reposArray
end github_FetchOrgRepoAray

function github_FetchOrgRepoListJson pOrgName
   if pOrgName is empty then put "LiveCodeWorld" into pOrgName
   put merge ("/orgs/[[pOrgName]]/repos") into restPath
   put github_RestGet (restPath) into someJSON
   return someJSON
end github_FetchOrgRepoListJson

function github_FetchRepoArray repoName, pOwner
   if pOwner is empty then put "LiveCodeWorld" into pOwner
   put merge ("/repos/[[pOwner]]/[[repoName]]") into restPath
   put github_RestGet (restPath) into someJSON
   put json_ToArray (someJSON) into repoArray
   return repoArray
end github_FetchRepoArray

function github_ListMyRepos
   put github_RestGet ("/user/repos") into someData
   return someData
end github_ListMyRepos

function github_ListPublicRepos
   put github_RestGet ("/users/opn/repos") into someData
   return someData
end github_ListPublicRepos


--> GitHub | REST
-
function github_RestGet restPath
   put _constructApiUrl (restPath) into someUrl
   put github_RestGetFromUrl (someUrl) into someJSON
   return someJSON
end github_RestGet

function github_RestGetFromUrl someUrl
   _setAuthHeaders
   put url someUrl into someJSON
   return someJSON
end github_RestGetFromUrl

command github_RestPost restPath, postJSON
   _setAuthHeaders
   put _constructApiUrl (restPath) into someUrl
   
   post postJSON to url someUrl
   put it into postResult
   return postResult
end github_RestPost

command github_RestPatch restPath, postJSON
   _setAuthHeaders
   put _constructApiUrl (restPath) into someUrl
   -- patch url someUrl
   post postJSON to url someUrl
   put it into postResult
   return postResult
end github_RestPatch

command github_RestDelete restPath
   -- this is slow
   _setAuthHeaders
   put _constructApiUrl (restPath) into someUrl
   delete url someUrl
   return the result
end github_RestDelete


--> GitHub | Private
-
private function _constructIssueJSON someTitle, pBody, pAssignee, pMilestone, pLabelArray
   put someTitle into jsonArray ["title"]
   
   if pBody is not empty then put pBody into jsonArray ["body"]
   if pAssignee is not empty then put pAssignee into jsonArray ["assignee"]
   if pMilestone is not empty then put pMilestone into jsonArray ["milestone"]
   if pLabelArray is an array then
      put pLabelArray into jsonArray ["labels"]
   else if pLabelArray is not empty then
      replace CR with comma in pLabelArray
      split pLabelArray with comma
      put pLabelArray into jsonArray ["labels"]
   end if
   
   put json_FromArray (jsonArray) into someJSON
   return someJSON
end _constructIssueJSON

private function _issueCommandPath repoOwner, someRepo, issueString
   put "/repos/" & repoOwner & "/" & someRepo & "/" & issueString into restPath
   return restPath
end _issueCommandPath

private function _constructApiUrl restPath
   local GitHubApiStem = "https://api.github.com"
   
   put GitHubApiStem into someUrl
   if char 1 of restPath is not "/" then put "/" after someUrl
   put restPath after someUrl
   
   return someUrl
end _constructApiUrl

private command _setAuthHeaders
   put github_GetApiToken() into gitHubApiToken
   put "Accept: application/vnd.github.v3+json" into someHeader
   put CR & "Authorization: token" && gitHubApiToken after someHeader
   put CR & "User-Agent: OPN" after someHeader
   set the httpheaders to someHeader
end _setAuthHeaders


--> Deps
-
command text_EscapeReturns @someText
   /*
   \r = CR (Carriage Return) // Used as a new line character in Mac OS before X
      \n = LF (Line Feed) // Used as a new line character in Unix/Mac OS X
      \r\n = CR + LF // Used as a new line character in Windows
      */
   -- replace CRLF with "\r\n" in someText
   replace CR with "\r" in someText
   replace LF with "\n" in someText
end text_EscapeReturns

function json_EncodeText someText
   text_EscapeReturns someText
   xml_Escape someText
   put text_UTF8
end json_EncodeText

private function _constructIssueJSON someTitle, pBody, pAssignee, pMilestone, pLabelArray
   put someTitle into jsonArray ["title"]
   
   if pBody is not empty then
      put pBody into jsonArray ["body"]
   end if
   if pAssignee is not empty then put pAssignee into jsonArray ["assignee"]
   if pMilestone is not empty then put pMilestone into jsonArray ["milestone"]
   if pLabelArray is an array then
      put pLabelArray into jsonArray ["labels"]
   else if pLabelArray is not empty then
      replace CR with comma in pLabelArray
      split pLabelArray with comma
      put pLabelArray into jsonArray ["labels"]
   end if
   
   put json_FromArray (jsonArray) into someJSON
   return someJSON
end _constructIssueJSON
